
# refresh_rate: 30 seconds

appenders:
  
  # # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    encoder:
     pattern: "{h([{d(%Y-%m-%d %H:%M:%S)} | {l:>5} {M}:{L}])} {m}{n}"

  # An appender named "file" that writes to a file with a custom pattern encoder
  file:
    kind: rolling_file
    path: "log/event.log"
    encoder:
      pattern: "{h([{d(%Y-%m-%d %H:%M:%S)} | {l:>5} ])} {m}{n}"
    policy:
      kind: compound 
      trigger: 
        kind: size
        limit: 30 mb
      roller: 
        
        kind: fixed_window
        pattern: "log/event_{}.log" 
        base: 1 
        count: 50
        
        
  session:
      kind: rolling_file
      path: "log/session.log"
      encoder:
        pattern: "{h([{d(%Y-%m-%d %H:%M:%S)} | {l:>5} ])} {m}{n}"
      policy:
        kind: compound 
        trigger: 
          kind: size
          limit: 30 mb
        roller: 
          
          kind: fixed_window
          pattern: "log/session_{}.log" 
          base: 1 
          count: 50

  keyboard:
    kind: rolling_file
    path: "log/keyboard.log"
    encoder:
      pattern: "{h([{d(%Y-%m-%d %H:%M:%S)} | {l:>5} ])} {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 30 mb
      roller:
        kind: fixed_window
        pattern: "log/keyboard_{}.log"
        base: 1
        count: 50
  process:
    kind: rolling_file
    path: "log/process.log"
    encoder:
      pattern: "{h([{d(%Y-%m-%d %H:%M:%S)} | {l:>5} ])} {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 30 mb
      roller:
        kind: fixed_window
        pattern: "log/process_{}.log"
        base: 1
        count: 50
# Set the default logging level to "warn" and attach the "stdout" appender to the root
# trace > debug > info > warn > error
root:
  level: info
  appenders:
    - file
    - stdout



loggers:
  # Set the logging level for the "actix_web::middleware::logger" module to "trace"
  # and attach the "ask" appender to it
  file_watch::session:
    level: TRACE
    appenders:
      - session
      - stdout
    additive: false

  evtx::evtx_chunk:
    level: off

  file_watch::keyboard_monitor:
    level: DEBUG
    appenders:
      - keyboard
      - stdout
    additive: false

  file_watch::process_monitor:
    level: INFO
    appenders:
      - process
    additive: false